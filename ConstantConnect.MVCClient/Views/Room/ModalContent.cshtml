@*@model ConstantConnect.MVCClient.Models.Modal*@
@model ConstantConnect.DTO.Shared.Room

<div class="modal-body">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Model.Name
    </div>
    <div id="alertplaceholder"></div>
    <div class="modal-body" id="room-modal-content">
        <ul class="nav nav-tabs">
            <li class="active">
                <a href="#details" data-toggle="tab">Details</a>
            </li>
            <li>
                <a href="#performance" data-toggle="tab">Performance</a>
            </li>
            <li>
                <a href="#roomservicetickets" id="roomserviceticketstab" data-toggle="tab">Service Tickets</a>
            </li>
            <li>
                <a href="#documents" data-toggle="tab">Documents</a>
            </li>
            <li>
                <a href="#inventory" data-toggle="tab">Inventory</a>
            </li>
            <li>
                <a href="#devicesIPData" data-toggle="tab">Devices/IP Data</a>
            </li>
            <li>
                <a href="#warranty-tab" data-toggle="tab">Warranty</a>
            </li>
        </ul>
        <!-- Tab panes -->
        <div class="tab-content">

            <div class="tab-pane fade in active" id="details">
                @*@{Html.RenderPartial("Details", Model.Id);}*@
                @{Html.RenderAction("Details", Model); }
            </div>
            <div class="tab-pane fade" id="performance">
                @{Html.RenderAction("Performance", Model); }
            </div>
            <div class="tab-pane fade" id="roomservicetickets">
                @{Html.RenderAction("ServiceTickets", Model); }
            </div>
            <div class="tab-pane fade" id="devicesIPData">
                @{Html.RenderAction("DevicesIpData", Model); }
            </div>
            <div class="tab-pane fade" id="documents">
                @{Html.RenderAction("Documents", Model); }
            </div>
            <div class="tab-pane fade" id="inventory">
                @{Html.RenderAction("Inventory", Model); }
            </div>
            <div class="tab-pane fade" id="warranty-tab">
                @{Html.RenderAction("Warranty", Model); }
            </div>
        </div>

    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-success" data-dismiss="modal">Close</button>
    </div>
</div>

<script>
    $(document).ready(function () {
        $('.modal-data-table').DataTable({
            responsive: true,
            info: false,
            scrollY: "400px",
            scrollX: true,
            scrollCollapse: true,
            paging: false,
            columnsDefs: [
                { "width": "25%", "targets": 0 }
            ],
            fixedColumns: true
        });

        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            $('.modal-data-table').DataTable().draw();
            //configureDropZone();
        });
    });

    function configureDropZone() {
        var previewNode = document.querySelector("#template");
        previewNode.id = "";
        var previewTemplate = previewNode.parentNode.innerHTML;
        previewNode.parentNode.removeChild(previewNode);

        var myDropzone = new Dropzone(document.body, { // Make the whole body a dropzone
            url: "/target-url", // Set the url
            thumbnailWidth: 60,
            thumbnailHeight: 60,
            parallelUploads: 20,
            previewTemplate: previewTemplate,
            autoQueue: false, // Make sure the files aren't queued until manually added
            previewsContainer: "#previews", // Define the container to display the previews
            clickable: ".fileinput-button", // Define the element that should be used as click trigger to select files.

            init: function () {
                var thisdz = this;
                $.getJSON("/room/GetAttachments/@Model.Id").done(function (data) {
                    if (data.Data != '') {

                        $.each(data.Data, function (index, item) {
                            //// Create the mock file:
                            console.log(item);

                            var mockFile = {
                                name: item.Name,
                                path: item.Path,
                                size: item.Size,
                                createdOn: item.CreatedOn
                            };

                            // Call the default addedfile event handler
                            thisdz.emit("addedfile", mockFile);

                            // And optionally show the thumbnail of the file:
                            thisdz.emit("thumbnail", mockFile, item.Path);

                            thisdz.emit("complete", mockFile);
                            // If you use the maxFiles option, make sure you adjust it to the
                            // correct amount:
                            //var existingFileCount = 1; // The number of files already uploaded
                            //myDropzone.options.maxFiles = myDropzone.options.maxFiles - existingFileCount;
                        });
                    };
                })
            }

        });

        myDropzone.on("addedfile", function (file) {
            // Hookup the start button
            file.previewElement.querySelector(".start").onclick = function () { myDropzone.enqueueFile(file); };
        });

        // Update the total progress bar
        myDropzone.on("totaluploadprogress", function (progress) {
            document.querySelector("#total-progress .progress-bar").style.width = progress + "%";
        });

        myDropzone.on("sending", function (file) {
            // Show the total progress bar when upload starts
            document.querySelector("#total-progress").style.opacity = "1";
            // And disable the start button
            file.previewElement.querySelector(".start").setAttribute("disabled", "disabled");
        });

        // Hide the total progress bar when nothing's uploading anymore
        myDropzone.on("queuecomplete", function (progress) {
            document.querySelector("#total-progress").style.opacity = "0";
        });

        // Setup the buttons for all transfers
        // The "add files" button doesn't need to be setup because the config
        // `clickable` has already been specified.
        document.querySelector("#actions .start").onclick = function () {
            myDropzone.enqueueFiles(myDropzone.getFilesWithStatus(Dropzone.ADDED));
        };
        document.querySelector("#actions .cancel").onclick = function () {
            myDropzone.removeAllFiles(true);
        };
    }







    @*function configureDropZone() {
        $('#dropzoneForm').dropzone({
            headers:
                { 'Cache-Control': null },
            acceptedFiles: 'image/*,application/pdf,application/xlsx',
            maxFiles: 10,
            init: function () {
                var thisdz = this;
                $.getJSON("/room/GetAttachments/@Model.Id").done(function (data) {
                    if (data.Data != '') {

                        $.each(data.Data, function (index, item) {
                            //// Create the mock file:
                            console.log(item);

                            var mockFile = {
                                name: item.Name,
                                path: item.Path,
                                size: item.Size,
                                createdOn: item.CreatedOn
                            };

                            // Call the default addedfile event handler
                            thisdz.emit("addedfile", mockFile);

                            // And optionally show the thumbnail of the file:
                            // thisdz.emit("thumbnail", mockFile, item.Path);

                            thisdz.emit("complete", mockFile);
                            // If you use the maxFiles option, make sure you adjust it to the
                            // correct amount:
                            //var existingFileCount = 1; // The number of files already uploaded
                            //myDropzone.options.maxFiles = myDropzone.options.maxFiles - existingFileCount;
                        });
                    };
                });

                this.on("success", function (file, responseText) {
                    // Handle the responseText here. For example,
                    // add the text to the preview element:
                    file.previewTemplate.appendChild(document.createTextNode(responseText));
                });
                this.on("maxfilesexceeded", function (data) {
                    var res = eval('(' + data.xhr.responseText + ')');

                });
                this.on("addedfile", function (file) {

                    var removeButton = Dropzone.createElement("<button class='btn btn-circle btn-danger'><i class='fa fa-times'></i></button>");

                    var downloadButton = Dropzone.createElement("<button class='btn btn-circle btn-success'><i class='fa fa-link'></i></button>");
                    // Capture the Dropzone instance as closure.
                    var _this = this;

                    // Listen to the click event
                    removeButton.addEventListener("click", function (e) {
                        // Make sure the button click doesn't submit the form:
                        e.preventDefault();
                        e.stopPropagation();
                        // Remove the file preview.
                        _this.removeFile(file);

                        removeFile(file);

                        // If you want to the delete the file on the server as well,
                        // you can do the AJAX request here.
                    });

                    downloadButton.addEventListener("click", function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        downloadFile(file);
                    });


                    // Add the button to the file preview element.
                    file.previewElement.appendChild(removeButton);
                    file.previewElement.appendChild(downloadButton);
                });
            }
        })
    }

    function downloadFile(file) {
        $.ajax(
            {
                url: '/room/downloadattachment?filePath='+file.path+'&fileName='+file.name,
                type: "POST",
                success: function () {
                    window.location = '/room/downloadattachment?filePath=' + file.path + '&fileName=' + file.name;
                }
            });
    }

    function removeFile(file) {
        $.ajax({
            url: "/Room/DeleteUploadedFile?file="+file.name,
            dataType: 'json',
        })
        .success(function (result) {
            alert("Deleted");
        })
        .error(function (xhr, status) {
            console.log(status);
        })
    }*@


</script>
